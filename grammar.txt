PROGRAM' -> PROGRAM
PROGRAM -> DEF-LIST
DEF-LIST -> DEF-LIST DEF
DEF-LIST -> ''
DEF -> VAR-DEF
DEF -> FUN-DEF
VAR-DEF -> var VAR-LIST ;
VAR-LIST -> ID-LIST
ID-LIST -> ID ID-LIST-CONT
ID-LIST-CONT -> , ID ID-LIST-CONT
ID-LIST-CONT -> ''
FUN-DEF -> ID ( PARAM-LIST ) { VAR-DEF-LIST STMT-LIST }
PARAM-LIST -> ID-LIST
PARAM-LIST -> ''
VAR-DEF-LIST -> VAR-DEF-LIST VAR-DEF
VAR-DEF-LIST -> ''
STMT-LIST -> STMT-LIST STMT
STMT-LIST -> ''
STMT -> STMT-ASSIGN
STMT -> STMT-INCR
STMT -> STMT-DECR
STMT -> STMT-FUN-CALL
STMT -> STMT-IF
STMT -> STMT-LOOP
STMT -> STMT-BREAK
STMT -> STMT-RETURN
STMT -> STMT-EMPTY
STMT-ASSIGN -> ID = EXPR ;
STMT-INCR -> ID ++ ;
STMT-DECR -> ID -- ;
STMT-FUN-CALL -> FUN-CALL ;
FUN-CALL -> ID ( EXPR-LIST )
EXPR-LIST -> EXPR EXPR-LIST-CONT
EXPR-LIST -> ''
EXPR-LIST-CONT ->, EXPR EXPR-LIST-CONT
EXPR-LIST-CONT -> ''
STMT-IF -> if ( EXPR ) { STMT-LIST } ELSE-IF-LIST ELSE
ELSE-IF-LIST -> ELSE-IF-LIST elseif ( EXPR ) { STMT-LIST }
ELSE-IF-LIST -> ''
ELSE -> else { STMT-LIST }
ELSE -> ''
STMT-LOOP -> loop { STMT-LIST }
STMT-BREAK -> break ;
STMT-RETURN -> return EXPR ;
STMT-EMPTY -> ;
EXPR -> EXPR-OR
EXPR-OR -> EXPR-OR || EXPR-AND
EXPR-OR -> EXPR-AND
EXPR-AND -> EXPR-AND && EXPR-COMP
EXPR-AND -> EXPR-COMP
EXPR-COMP -> EXPR-COMP OP-COMP EXPR-REL
EXPR-COMP -> EXPR-REL
OP-COMP -> ==
OP-COMP -> !=
EXPR-REL -> EXPR-REL OP-REL EXPR-ADD
EXPR-REL -> EXPR-ADD
OP-REL -> <
OP-REL -> <=
OP-REL -> >
OP-REL -> >=
EXPR-ADD -> EXPR-ADD OP-ADD EXPR-MUL
EXPR-ADD -> EXPR-MUL
OP-ADD -> +
OP-ADD -> -
EXPR-MUL -> EXPR-MUL OP-MUL EXPR-UNARY
EXPR-MUL -> EXPR-UNARY
OP-MUL -> *
OP-MUL -> /
OP-MUL -> %
EXPR-UNARY -> OP-UNARY EXPR-UNARY
EXPR-UNARY -> EXPR-PRIMARY
OP-UNARY -> +
OP-UNARY -> -
OP-UNARY -> !
EXPR-PRIMARY -> ID
EXPR-PRIMARY -> FUN-CALL
EXPR-PRIMARY -> ARRAY
EXPR-PRIMARY -> LIT
EXPR-PRIMARY -> ( EXPR )
ARRAY -> [ EXPR-LIST ]
LIT -> LIT-INT
LIT -> LIT-CHAR
LIT -> LIT-STR
LIT-INT -> int
LIT-CHAR -> char
LIT-STR -> str
ID -> id